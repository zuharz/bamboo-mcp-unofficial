---
description: "Code quality and linting standards"
globs: "src/**/*.ts,test/**/*.ts"
---

# Code Quality Standards

## ESLint Configuration
This project uses comprehensive ESLint rules defined in [eslint.config.js](mdc:eslint.config.js):

- **Security Rules**: Enabled via `eslint-plugin-security`
- **TypeScript Rules**: Strict type checking and best practices
- **Import Organization**: Auto-sorted imports via `simple-import-sort`
- **Prettier Integration**: Consistent code formatting

## Custom Rules

### NO EMOJIS POLICY - STRICTLY ENFORCED
**NEVER use emojis anywhere in this project:**

#### Forbidden Locations:
- Source code files (.ts, .js)
- Comments and documentation
- Commit messages
- README files and markdown documentation
- Test files and test descriptions
- Error messages and user-facing text
- Configuration files
- Rule files and project documentation
- Logging

#### Technical Enforcement:
- **ESLint Rule**: Custom rule in [eslint-emoji-rule.js](mdc:eslint-emoji-rule.js) forbids emoji characters
- **Build Failure**: Emojis will cause linting errors and prevent builds
- **Pre-commit Hooks**: Automatically reject commits containing emojis

#### Alternatives to Emojis:
- Use descriptive text: "Error", "Success", "Warning"
- Use conventional markers: "[CRITICAL]", "[INFO]", "[DEPRECATED]"
- Use standard symbols: "*", "-", "+", "x" for lists and status
- Use semantic HTML/markdown: `**bold**`, `*italic*`, `> blockquote`

#### Examples:
```typescript
// WRONG - Contains emojis (examples removed to comply with no-emoji policy)
console.log("[emoji] Success! Data loaded");
throw new Error("[emoji] Failed to connect");

// CORRECT - Professional text
console.log("SUCCESS: Data loaded successfully");
throw new Error("ERROR: Failed to connect to API");
```

This policy ensures professional, accessible, and universally readable code and documentation.

## TypeScript Standards
- Strict mode enabled with comprehensive checks
- No `any` types allowed (`@typescript-eslint/no-explicit-any: error`)
- Consistent type imports preferred
- Unused variables must be prefixed with `_`

## Required Scripts
Before committing, ensure these pass:
```bash
npm run lint        # ESLint validation
npm run typecheck   # TypeScript type checking
npm test           # Test suite
npm run build      # Build verification
```

## Pre-commit Validation
Git hooks automatically run:
1. ESLint checks
2. TypeScript validation
3. Test suite (on pre-push)
4. Build verification (on pre-push)