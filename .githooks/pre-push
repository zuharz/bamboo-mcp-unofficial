#!/bin/sh
# Pre-push hook for BambooHR MCP Server  
# Industry best practices: Full quality validation before push

echo "🚀 Running comprehensive pre-push validation..."

# Check if npm is available
if ! command -v npm &> /dev/null; then
    echo "❌ npm is not installed or not in PATH"
    exit 1
fi

# Auto-fix common issues before validation
echo "🔧 Auto-fixing common code quality issues..."

# Step 1: Auto-fix linting issues
echo "   🔧 Running lint auto-fix..."
npm run lint:fix
LINT_FIX_EXIT_CODE=$?
if [ $LINT_FIX_EXIT_CODE -eq 0 ]; then
    echo "   ✅ Linting auto-fixes applied successfully"
else
    echo "   ⚠️  Some linting issues detected (exit code: $LINT_FIX_EXIT_CODE)"
fi

# Step 2: Auto-format code
echo "   🎨 Auto-formatting code..."
npm run format
FORMAT_EXIT_CODE=$?
if [ $FORMAT_EXIT_CODE -eq 0 ]; then
    echo "   ✅ Code formatting applied successfully"
else
    echo "   ⚠️  Code formatting encountered issues (exit code: $FORMAT_EXIT_CODE)"
fi

# Step 3: Stage any auto-fixes that were applied
echo "   📋 Staging any auto-fixes..."
git add -A
echo "   ✅ Auto-fixes staged for commit"

# Final quality validation after auto-fixes
echo "🔍 Running complete quality validation after auto-fixes..."
npm run quality
QUALITY_EXIT_CODE=$?
if [ $QUALITY_EXIT_CODE -ne 0 ]; then
    echo "❌ Quality checks still failing after auto-fixes (exit code: $QUALITY_EXIT_CODE)"
    echo "💡 Manual intervention required - some issues cannot be auto-fixed"
    echo "🔍 Review the output above and fix remaining issues manually"
    exit 1
fi
echo "✅ Code quality validation passed"

# Run test suite
echo "🧪 Running test suite..."
npm test
TEST_EXIT_CODE=$?
if [ $TEST_EXIT_CODE -ne 0 ]; then
    echo "⚠️  Tests failed or are misconfigured (exit code: $TEST_EXIT_CODE)"
    echo "💡 Tip: Run 'npm test' locally to debug the issues"
    echo "📝 Continuing with other checks for now..."
    # Don't exit - tests might be work in progress
fi

# Build validation
echo "🏗️ Running complete build validation..."
npm run build
if [ $? -ne 0 ]; then
    echo "❌ Build failed. Please fix the build errors before pushing."
    exit 1
fi
echo "✅ Build validation passed"

# MCP Protocol Version Validation  
echo "🔍 Validating MCP protocol compatibility..."

# Check MCP SDK version
REQUIRED_MCP_VERSION="1.17.0"
CURRENT_MCP_VERSION=$(node -p "require('./package.json').dependencies['@modelcontextprotocol/sdk'].replace(/[\^~]/, '')" 2>/dev/null || echo "unknown")

if [ "$CURRENT_MCP_VERSION" = "unknown" ]; then
    echo "❌ Could not detect MCP SDK version"
    echo "🚫 PUSH BLOCKED - Ensure @modelcontextprotocol/sdk is properly installed"
    exit 1
fi

echo "   Current MCP SDK: $CURRENT_MCP_VERSION"
echo "   Required MCP SDK: $REQUIRED_MCP_VERSION+"

# Version comparison
if [ "$(printf '%s\n' "$REQUIRED_MCP_VERSION" "$CURRENT_MCP_VERSION" | sort -V | head -n1)" = "$REQUIRED_MCP_VERSION" ]; then
    echo "✅ MCP SDK supports latest protocol (2025-06-18)"
else
    echo "❌ MCP SDK version too old for latest protocol (2025-06-18)"
    echo "🚫 PUSH BLOCKED - Update with: npm install @modelcontextprotocol/sdk@latest"
    exit 1
fi

# Check for hardcoded old protocol versions
echo "🔍 Scanning for outdated protocol version references..."
if grep -r "2024-11-05\|2024-10-07\|2024-09-25" src/ --include="*.ts" --include="*.js" 2>/dev/null; then
    echo "❌ Found outdated protocol version references"
    echo "🚫 PUSH BLOCKED - Remove hardcoded protocol versions, let SDK handle negotiation"
    exit 1
fi
echo "✅ No outdated protocol version references found"

# DXT packaging validation (STRICT MODE)
echo "📦 Running comprehensive DXT package validation..."

# Ensure DXT CLI is available
if ! command -v dxt &> /dev/null; then
    echo "📥 Installing DXT CLI for validation..."
    npm install -g @anthropic-ai/dxt
    if ! command -v dxt &> /dev/null; then
        echo "❌ Failed to install DXT CLI - cannot proceed"
        echo "💡 Please install manually: npm install -g @anthropic-ai/dxt"
        exit 1
    fi
    echo "✅ DXT CLI installed successfully"
fi

# Strict DXT validation with full output capture
echo "🔍 Running strict DXT validation..."
DXT_OUTPUT=$(dxt validate manifest.json 2>&1)
DXT_EXIT_CODE=$?

echo "📋 DXT Validation Output:"
echo "$DXT_OUTPUT"

# Check for any errors or warnings
if [ $DXT_EXIT_CODE -ne 0 ]; then
    echo "❌ DXT validation failed with errors"
    echo "🚫 PUSH BLOCKED - Fix DXT validation errors before pushing"
    exit 1
fi

# Check for actual DXT warnings/errors (be more specific)
if echo "$DXT_OUTPUT" | grep -E "(ERROR|WARNING|WARN|Failed|Invalid|Error):"; then
    echo "⚠️  DXT validation contains warnings or errors"
    echo "🚫 PUSH BLOCKED - All DXT warnings must be resolved"
    echo ""
    echo "💡 Common fixes:"
    echo "   - Check manifest.json for syntax errors"
    echo "   - Ensure all required fields are present"
    echo "   - Verify file paths in manifest"
    exit 1
fi

# Check essential DXT files
MISSING_FILES=""
if [ ! -f "manifest.json" ]; then
    MISSING_FILES="$MISSING_FILES manifest.json"
fi
if [ ! -f "server/index.js" ]; then
    MISSING_FILES="$MISSING_FILES server/index.js"
fi
if [ ! -f ".dxtignore" ]; then
    echo "⚠️  Warning: .dxtignore not found - package may be larger than optimal"
fi

if [ ! -z "$MISSING_FILES" ]; then
    echo "❌ Missing essential DXT files:$MISSING_FILES"
    exit 1
fi

# Comprehensive DXT package creation test
echo "📋 Testing actual DXT package creation..."
TEMP_DXT_DIR=$(mktemp -d)
cd "$TEMP_DXT_DIR"
cp -r "$OLDPWD"/* . 2>/dev/null || true
cp -r "$OLDPWD"/.dxtignore . 2>/dev/null || true

DXT_PACK_OUTPUT=$(dxt pack 2>&1)
DXT_PACK_EXIT_CODE=$?

echo "📋 DXT Pack Output:"
echo "$DXT_PACK_OUTPUT"

if [ $DXT_PACK_EXIT_CODE -ne 0 ]; then
    echo "❌ DXT package creation failed"
    echo "🚫 PUSH BLOCKED - Cannot create valid DXT package"
    cd "$OLDPWD"
    rm -rf "$TEMP_DXT_DIR"
    exit 1
fi

# Check for actual DXT packaging warnings/errors
if echo "$DXT_PACK_OUTPUT" | grep -E "(ERROR|WARNING|WARN|Failed|Invalid|Error):"; then
    echo "⚠️  DXT package creation contains warnings"
    echo "🚫 PUSH BLOCKED - Resolve all DXT packaging warnings"
    cd "$OLDPWD"
    rm -rf "$TEMP_DXT_DIR"
    exit 1
fi

# Verify DXT file was created
DXT_FILE=$(find . -name "*.dxt" | head -1)
if [ -z "$DXT_FILE" ]; then
    echo "❌ No DXT file was created"
    echo "🚫 PUSH BLOCKED - DXT packaging failed silently"
    cd "$OLDPWD"
    rm -rf "$TEMP_DXT_DIR"
    exit 1
fi

# Verify DXT file size is reasonable (not empty, not too large)
DXT_SIZE=$(stat -f%z "$DXT_FILE" 2>/dev/null || stat -c%s "$DXT_FILE" 2>/dev/null)
if [ "$DXT_SIZE" -lt 1000 ]; then
    echo "❌ DXT file is suspiciously small ($DXT_SIZE bytes)"
    echo "🚫 PUSH BLOCKED - DXT package appears incomplete"
    cd "$OLDPWD"
    rm -rf "$TEMP_DXT_DIR"
    exit 1
fi

echo "✅ DXT package created successfully ($DXT_SIZE bytes)"
cd "$OLDPWD"
rm -rf "$TEMP_DXT_DIR"

echo "✅ All DXT validations passed"

# Security check - ensure no secrets in staged files
echo "🔒 Running security check..."
STAGED_FILES=$(git diff --cached --name-only)
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Check for common secret patterns
        if grep -qE "(api[_-]?key|password|secret|token).*[=:].*['\"][^'\"]{8,}" "$file" 2>/dev/null; then
            echo "⚠️  Potential secret detected in $file - please review"
            echo "💡 Use environment variables for sensitive data"
        fi
    fi
done
echo "✅ Security check completed"

# Final summary
echo ""
echo "🎉 All pre-push validations passed!"
echo "📋 Summary:"
echo "  ✅ Code Quality (lint, format, types)"
echo "  ✅ Build Validation"  
echo "  ✅ MCP Protocol Validation (2025-06-18)"
echo "  ✅ DXT Manifest Validation (STRICT MODE)"
echo "  ✅ DXT Package Creation (VERIFIED)"
echo "  ✅ Security Check"
echo "  📝 Tests: $([ $TEST_EXIT_CODE -eq 0 ] && echo "✅ Passed" || echo "⚠️  Needs attention")"
echo ""
echo "🚀 Ready to push with guaranteed DXT quality!"
exit 0