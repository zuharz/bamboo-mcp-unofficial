name: Release with DXT Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag for the release (e.g., v1.2.0)'
        required: true
        type: string
      create_release:
        description: 'Create a GitHub release'
        required: false
        type: boolean
        default: true

jobs:
  # Quality assurance and build
  quality-and-build:
    name: Quality Assurance & Build
    runs-on: ubuntu-latest

    outputs:
      package-name: ${{ steps.package-info.outputs.name }}
      package-version: ${{ steps.package-info.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install DXT CLI
        run: npm install -g @anthropic-ai/dxt

      - name: Get package information
        id: package-info
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package: $NAME@$VERSION"

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive quality assurance
        run: |
          echo "🔍 Running release-grade quality pipeline..."
          chmod +x scripts/build.sh
          ./scripts/build.sh

      - name: Build DXT package with full validation
        run: |
          echo "📦 Building production DXT package..."
          chmod +x scripts/build-dxt.sh
          ./scripts/build-dxt.sh

      - name: Validate DXT package for release
        run: |
          if [ -d "dist" ] && ls dist/*.dxt 1> /dev/null 2>&1; then
            DXT_FILE=$(ls dist/*.dxt | head -1)
            DXT_SIZE=$(du -sh "$DXT_FILE" | cut -f1)
            echo "✅ Production DXT package ready: $(basename "$DXT_FILE") ($DXT_SIZE)"
            
            # Additional validation for release
            if command -v dxt &> /dev/null; then
              echo "🔍 Final DXT validation..."
              cd dist
              if dxt validate "$(basename "$DXT_FILE")"; then
                echo "✅ DXT package is release-ready"
              else
                echo "❌ DXT package validation failed for release"
                exit 1
              fi
              cd ..
            fi
          else
            echo "❌ No DXT package found for release!"
            exit 1
          fi

      - name: Upload NPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-release-${{ steps.package-info.outputs.version }}
          path: |
            server/
            package.json
            manifest.json
            README.md
            LICENSE
          retention-days: 365

      - name: Upload DXT package for release
        uses: actions/upload-artifact@v4
        with:
          name: dxt-release-${{ steps.package-info.outputs.version }}
          path: dist/*.dxt
          retention-days: 365

  # NPM Publishing
  publish-npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    needs: quality-and-build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@zuharz'

      - name: Download NPM artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-release-${{ needs.quality-and-build.outputs.package-version }}

      - name: Install dependencies
        run: npm ci

      - name: Publish package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: NPM publish summary
        run: |
          echo "## 📦 NPM Package Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: \`${{ needs.quality-and-build.outputs.package-name }}@${{ needs.quality-and-build.outputs.package-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Packages" >> $GITHUB_STEP_SUMMARY

  # GitHub Release with DXT
  create-github-release:
    name: Create GitHub Release with DXT
    runs-on: ubuntu-latest
    needs: [quality-and-build, publish-npm]
    if: github.event.inputs.create_release != 'false'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download DXT package
        uses: actions/download-artifact@v4
        with:
          name: dxt-release-${{ needs.quality-and-build.outputs.package-version }}
          path: ./release-assets

      - name: Prepare release assets
        run: |
          echo "📦 Preparing release assets..."
          ls -la release-assets/

          # Get the DXT file name and create a more user-friendly name
          DXT_FILE=$(ls release-assets/*.dxt | head -1)
          FRIENDLY_NAME="bamboohr-mcp-${{ needs.quality-and-build.outputs.package-version }}.dxt"

          if [ -f "$DXT_FILE" ]; then
            cp "$DXT_FILE" "./release-assets/$FRIENDLY_NAME"
            echo "✅ Created release-ready DXT: $FRIENDLY_NAME"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version_tag || github.ref_name }}
          name: 'BambooHR MCP Server ${{ needs.quality-and-build.outputs.package-version }}'
          files: |
            release-assets/*.dxt
          body: |
            ## 🎉 BambooHR MCP Server Release ${{ needs.quality-and-build.outputs.package-version }}

            ### 📦 What's Included
            - **NPM Package**: Published to GitHub Packages
            - **DXT Package**: Ready for Claude Desktop installation

            ### 🚀 Installation Options

            #### Option 1: NPM Package
            ```bash
            npm install ${{ needs.quality-and-build.outputs.package-name }}
            # or
            npx ${{ needs.quality-and-build.outputs.package-name }}
            ```

            #### Option 2: DXT Package (Recommended)
            1. Download the `.dxt` file from the assets below
            2. Open Claude Desktop
            3. Go to Settings → Extensions
            4. Click "Install from file" and select the downloaded `.dxt` file
            5. Configure your BambooHR API credentials

            ### 🔧 Quality Assurance
            This release has passed comprehensive quality checks:
            - ✅ Security audit (no high/critical vulnerabilities)
            - ✅ Code quality validation (ESLint + Prettier + TypeScript)
            - ✅ Complete test suite execution
            - ✅ DXT package validation
            - ✅ Production build verification

            ### 📋 Requirements
            - **API Key**: BambooHR API key (get from BambooHR → User Menu → API Keys)
            - **Subdomain**: Your company's BambooHR subdomain

            Enjoy seamless HR data access with Claude! 🎯
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Package**: Available on GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "- **DXT Package**: Available as release asset" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 Release Page](../../releases/tag/${{ github.event.inputs.version_tag || github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Package Registry](../../packages)" >> $GITHUB_STEP_SUMMARY
